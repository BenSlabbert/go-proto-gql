// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/options.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/danielvladco/go-proto-gql"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	String_              string    `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	Foo                  *Foo2     `protobuf:"bytes,2,opt,name=foo,proto3" json:"foo,omitempty"`
	Float                []float32 `protobuf:"fixed32,3,rep,packed,name=float,proto3" json:"float,omitempty"`
	String2              string    `protobuf:"bytes,4,opt,name=string2,proto3" json:"string2,omitempty"`
	Foo2                 *Foo2     `protobuf:"bytes,5,opt,name=foo2,proto3" json:"foo2,omitempty"`
	Float2               []float32 `protobuf:"fixed32,6,rep,packed,name=float2,proto3" json:"float2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b83075c052b6d50, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *Data) GetFoo() *Foo2 {
	if m != nil {
		return m.Foo
	}
	return nil
}

func (m *Data) GetFloat() []float32 {
	if m != nil {
		return m.Float
	}
	return nil
}

func (m *Data) GetString2() string {
	if m != nil {
		return m.String2
	}
	return ""
}

func (m *Data) GetFoo2() *Foo2 {
	if m != nil {
		return m.Foo2
	}
	return nil
}

func (m *Data) GetFloat2() []float32 {
	if m != nil {
		return m.Float2
	}
	return nil
}

type Foo2 struct {
	Param1               string   `protobuf:"bytes,1,opt,name=param1,proto3" json:"param1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo2) Reset()         { *m = Foo2{} }
func (m *Foo2) String() string { return proto.CompactTextString(m) }
func (*Foo2) ProtoMessage()    {}
func (*Foo2) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b83075c052b6d50, []int{1}
}

func (m *Foo2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo2.Unmarshal(m, b)
}
func (m *Foo2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo2.Marshal(b, m, deterministic)
}
func (m *Foo2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo2.Merge(m, src)
}
func (m *Foo2) XXX_Size() int {
	return xxx_messageInfo_Foo2.Size(m)
}
func (m *Foo2) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo2.DiscardUnknown(m)
}

var xxx_messageInfo_Foo2 proto.InternalMessageInfo

func (m *Foo2) GetParam1() string {
	if m != nil {
		return m.Param1
	}
	return ""
}

func init() {
	proto.RegisterType((*Data)(nil), "pb.Data")
	proto.RegisterType((*Foo2)(nil), "pb.Foo2")
}

func init() { proto.RegisterFile("example/options.proto", fileDescriptor_5b83075c052b6d50) }

var fileDescriptor_5b83075c052b6d50 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x59, 0xc7, 0x71, 0xc8, 0x70, 0x62, 0x25, 0x90, 0x15, 0x85, 0x26, 0x98, 0x03, 0xbe,
	0xc4, 0x5e, 0x6f, 0xa8, 0xd2, 0x88, 0x0b, 0xaa, 0x50, 0x25, 0x0e, 0x48, 0xe0, 0x5c, 0x80, 0x13,
	0xbb, 0x89, 0xe3, 0xae, 0x70, 0x32, 0xae, 0xbd, 0x4e, 0xe1, 0x2d, 0xe0, 0x4d, 0x38, 0xf2, 0x36,
	0x20, 0x9e, 0x04, 0xf9, 0x4f, 0x53, 0x10, 0x6e, 0xd4, 0xdb, 0xce, 0x7c, 0xdf, 0xfc, 0x76, 0x77,
	0x46, 0x03, 0x0f, 0xa2, 0xcf, 0x62, 0x93, 0x26, 0x91, 0x8f, 0xa9, 0x56, 0xb8, 0xcd, 0xbd, 0x34,
	0x43, 0x8d, 0xd4, 0x48, 0xe5, 0xa0, 0x1f, 0x5f, 0x24, 0x75, 0x38, 0x78, 0x1f, 0x2b, 0x7d, 0x5e,
	0x48, 0x6f, 0x89, 0x1b, 0x7f, 0x73, 0xa9, 0xf4, 0x27, 0xbc, 0xf4, 0x63, 0x9c, 0x54, 0xe2, 0x64,
	0x27, 0x12, 0xb5, 0x12, 0x1a, 0xb3, 0xfc, 0xc5, 0x8e, 0x79, 0xcc, 0x63, 0x13, 0xce, 0x82, 0x13,
	0xf6, 0x8c, 0x4d, 0xd9, 0xc9, 0x71, 0x10, 0xcc, 0x26, 0x6c, 0x7e, 0xcc, 0xc4, 0x6c, 0x3e, 0x67,
	0x8c, 0xcd, 0xfc, 0xbd, 0xbb, 0x46, 0x3b, 0x3f, 0x08, 0x98, 0x2f, 0x85, 0x16, 0xf4, 0x08, 0xac,
	0x5c, 0x67, 0x6a, 0x1b, 0xdb, 0x64, 0x4c, 0xdc, 0xfe, 0xa9, 0xf5, 0xfb, 0xe7, 0xc8, 0x78, 0x47,
	0xc2, 0x26, 0x4b, 0x1d, 0xe8, 0xac, 0x11, 0x6d, 0x63, 0x4c, 0xdc, 0x7b, 0xfc, 0xae, 0x97, 0x4a,
	0xef, 0x0c, 0x91, 0xd7, 0xb6, 0x31, 0x09, 0x4b, 0x91, 0x0e, 0xa1, 0xbb, 0x4e, 0x50, 0x68, 0xbb,
	0x33, 0xee, 0xb8, 0x46, 0xad, 0x7d, 0x24, 0x61, 0x9d, 0xa4, 0x36, 0xf4, 0x6a, 0x16, 0xb7, 0xcd,
	0xf2, 0x8a, 0xf0, 0x2a, 0xa4, 0x43, 0x30, 0xd7, 0x88, 0xdc, 0xee, 0xfe, 0x0b, 0x0f, 0xab, 0x2c,
	0x7d, 0x08, 0x56, 0x05, 0xe0, 0xb6, 0x55, 0x62, 0xc3, 0x26, 0x72, 0x8e, 0xc0, 0x3c, 0x6b, 0xf4,
	0x54, 0x64, 0x62, 0x13, 0xd4, 0x2f, 0x0f, 0x9b, 0x88, 0x7f, 0xed, 0x40, 0x6f, 0x11, 0x65, 0x3b,
	0xb5, 0x8c, 0xe8, 0x23, 0xe8, 0xbd, 0x2e, 0xb4, 0xd0, 0x51, 0x40, 0x2b, 0x7c, 0xf9, 0xe5, 0xc1,
	0xfe, 0x74, 0x2d, 0xf3, 0x56, 0xd9, 0x01, 0xeb, 0x6d, 0x11, 0x65, 0x5f, 0x5a, 0x8b, 0x1d, 0xf3,
	0xfb, 0xaf, 0x91, 0x41, 0x47, 0xd0, 0x7b, 0x53, 0xc8, 0x44, 0xe5, 0xe7, 0x6d, 0x26, 0x97, 0xd0,
	0xc7, 0xd0, 0x5f, 0x14, 0x32, 0x5f, 0x66, 0x4a, 0x46, 0x6d, 0x16, 0x56, 0x5a, 0x4a, 0xc6, 0xa2,
	0x90, 0x41, 0x3b, 0x83, 0x11, 0xea, 0xc3, 0xfd, 0x57, 0xdb, 0x6a, 0x88, 0x7b, 0xd8, 0x81, 0x57,
	0xb9, 0xad, 0x05, 0xfc, 0xc6, 0x82, 0xf2, 0x86, 0xe0, 0xff, 0x82, 0xe9, 0xa1, 0x1b, 0x18, 0xa1,
	0x4f, 0xaf, 0xde, 0x7d, 0x33, 0xf9, 0x4e, 0x69, 0xe4, 0xdf, 0x08, 0x74, 0xab, 0x4e, 0xd2, 0xe1,
	0xa1, 0x96, 0xee, 0xd5, 0xf6, 0x71, 0x3c, 0x39, 0x38, 0xcc, 0xfa, 0x23, 0xb7, 0x68, 0xf7, 0xa0,
	0xfa, 0xc0, 0x69, 0xf0, 0xc1, 0xff, 0x6b, 0xbd, 0x56, 0x62, 0xab, 0xa2, 0x64, 0x97, 0x88, 0xd5,
	0x12, 0xaf, 0x77, 0x2c, 0xbe, 0x48, 0xfc, 0x66, 0x53, 0x9f, 0xa7, 0x52, 0x5a, 0x55, 0x76, 0xfa,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x13, 0x55, 0x49, 0xf6, 0xbe, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Mutate1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Mutate2(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Query1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (Service_PublishClient, error)
	Subscribe(ctx context.Context, in *Data, opts ...grpc.CallOption) (Service_SubscribeClient, error)
	PubSub1(ctx context.Context, opts ...grpc.CallOption) (Service_PubSub1Client, error)
	InvalidSubscribe1(ctx context.Context, opts ...grpc.CallOption) (Service_InvalidSubscribe1Client, error)
	InvalidSubscribe2(ctx context.Context, in *Data, opts ...grpc.CallOption) (Service_InvalidSubscribe2Client, error)
	InvalidSubscribe3(ctx context.Context, opts ...grpc.CallOption) (Service_InvalidSubscribe3Client, error)
	PubSub2(ctx context.Context, opts ...grpc.CallOption) (Service_PubSub2Client, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Mutate1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Service/Mutate1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Mutate2(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Service/Mutate2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Query1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Service/Query1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Service_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/pb.Service/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePublishClient{stream}
	return x, nil
}

type Service_PublishClient interface {
	Send(*Data) error
	CloseAndRecv() (*Data, error)
	grpc.ClientStream
}

type servicePublishClient struct {
	grpc.ClientStream
}

func (x *servicePublishClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePublishClient) CloseAndRecv() (*Data, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Subscribe(ctx context.Context, in *Data, opts ...grpc.CallOption) (Service_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[1], "/pb.Service/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_SubscribeClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type serviceSubscribeClient struct {
	grpc.ClientStream
}

func (x *serviceSubscribeClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) PubSub1(ctx context.Context, opts ...grpc.CallOption) (Service_PubSub1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[2], "/pb.Service/PubSub1", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePubSub1Client{stream}
	return x, nil
}

type Service_PubSub1Client interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type servicePubSub1Client struct {
	grpc.ClientStream
}

func (x *servicePubSub1Client) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePubSub1Client) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) InvalidSubscribe1(ctx context.Context, opts ...grpc.CallOption) (Service_InvalidSubscribe1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[3], "/pb.Service/InvalidSubscribe1", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceInvalidSubscribe1Client{stream}
	return x, nil
}

type Service_InvalidSubscribe1Client interface {
	Send(*Data) error
	CloseAndRecv() (*Data, error)
	grpc.ClientStream
}

type serviceInvalidSubscribe1Client struct {
	grpc.ClientStream
}

func (x *serviceInvalidSubscribe1Client) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceInvalidSubscribe1Client) CloseAndRecv() (*Data, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) InvalidSubscribe2(ctx context.Context, in *Data, opts ...grpc.CallOption) (Service_InvalidSubscribe2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[4], "/pb.Service/InvalidSubscribe2", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceInvalidSubscribe2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_InvalidSubscribe2Client interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type serviceInvalidSubscribe2Client struct {
	grpc.ClientStream
}

func (x *serviceInvalidSubscribe2Client) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) InvalidSubscribe3(ctx context.Context, opts ...grpc.CallOption) (Service_InvalidSubscribe3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[5], "/pb.Service/InvalidSubscribe3", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceInvalidSubscribe3Client{stream}
	return x, nil
}

type Service_InvalidSubscribe3Client interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type serviceInvalidSubscribe3Client struct {
	grpc.ClientStream
}

func (x *serviceInvalidSubscribe3Client) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceInvalidSubscribe3Client) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) PubSub2(ctx context.Context, opts ...grpc.CallOption) (Service_PubSub2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[6], "/pb.Service/PubSub2", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePubSub2Client{stream}
	return x, nil
}

type Service_PubSub2Client interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type servicePubSub2Client struct {
	grpc.ClientStream
}

func (x *servicePubSub2Client) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePubSub2Client) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Mutate1(context.Context, *Data) (*Data, error)
	Mutate2(context.Context, *Data) (*Data, error)
	Query1(context.Context, *Data) (*Data, error)
	Publish(Service_PublishServer) error
	Subscribe(*Data, Service_SubscribeServer) error
	PubSub1(Service_PubSub1Server) error
	InvalidSubscribe1(Service_InvalidSubscribe1Server) error
	InvalidSubscribe2(*Data, Service_InvalidSubscribe2Server) error
	InvalidSubscribe3(Service_InvalidSubscribe3Server) error
	PubSub2(Service_PubSub2Server) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Mutate1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Mutate1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/Mutate1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Mutate1(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Mutate2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Mutate2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/Mutate2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Mutate2(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Query1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Query1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/Query1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Query1(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Publish(&servicePublishServer{stream})
}

type Service_PublishServer interface {
	SendAndClose(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type servicePublishServer struct {
	grpc.ServerStream
}

func (x *servicePublishServer) SendAndClose(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePublishServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Subscribe(m, &serviceSubscribeServer{stream})
}

type Service_SubscribeServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type serviceSubscribeServer struct {
	grpc.ServerStream
}

func (x *serviceSubscribeServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_PubSub1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).PubSub1(&servicePubSub1Server{stream})
}

type Service_PubSub1Server interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type servicePubSub1Server struct {
	grpc.ServerStream
}

func (x *servicePubSub1Server) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePubSub1Server) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_InvalidSubscribe1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).InvalidSubscribe1(&serviceInvalidSubscribe1Server{stream})
}

type Service_InvalidSubscribe1Server interface {
	SendAndClose(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type serviceInvalidSubscribe1Server struct {
	grpc.ServerStream
}

func (x *serviceInvalidSubscribe1Server) SendAndClose(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceInvalidSubscribe1Server) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_InvalidSubscribe2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).InvalidSubscribe2(m, &serviceInvalidSubscribe2Server{stream})
}

type Service_InvalidSubscribe2Server interface {
	Send(*Data) error
	grpc.ServerStream
}

type serviceInvalidSubscribe2Server struct {
	grpc.ServerStream
}

func (x *serviceInvalidSubscribe2Server) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_InvalidSubscribe3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).InvalidSubscribe3(&serviceInvalidSubscribe3Server{stream})
}

type Service_InvalidSubscribe3Server interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type serviceInvalidSubscribe3Server struct {
	grpc.ServerStream
}

func (x *serviceInvalidSubscribe3Server) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceInvalidSubscribe3Server) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_PubSub2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).PubSub2(&servicePubSub2Server{stream})
}

type Service_PubSub2Server interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type servicePubSub2Server struct {
	grpc.ServerStream
}

func (x *servicePubSub2Server) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePubSub2Server) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mutate1",
			Handler:    _Service_Mutate1_Handler,
		},
		{
			MethodName: "Mutate2",
			Handler:    _Service_Mutate2_Handler,
		},
		{
			MethodName: "Query1",
			Handler:    _Service_Query1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Service_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Service_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PubSub1",
			Handler:       _Service_PubSub1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InvalidSubscribe1",
			Handler:       _Service_InvalidSubscribe1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InvalidSubscribe2",
			Handler:       _Service_InvalidSubscribe2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InvalidSubscribe3",
			Handler:       _Service_InvalidSubscribe3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PubSub2",
			Handler:       _Service_PubSub2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example/options.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Query1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Query2(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Mutate1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	Subscribe(ctx context.Context, in *Data, opts ...grpc.CallOption) (Query_SubscribeClient, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Query1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Query/Query1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Query2(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Query/Query2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mutate1(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/pb.Query/Mutate1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subscribe(ctx context.Context, in *Data, opts ...grpc.CallOption) (Query_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/pb.Query/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &querySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_SubscribeClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type querySubscribeClient struct {
	grpc.ClientStream
}

func (x *querySubscribeClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Query1(context.Context, *Data) (*Data, error)
	Query2(context.Context, *Data) (*Data, error)
	Mutate1(context.Context, *Data) (*Data, error)
	Subscribe(*Data, Query_SubscribeServer) error
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Query1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Query1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Query/Query1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Query1(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Query2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Query2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Query/Query2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Query2(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mutate1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mutate1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Query/Mutate1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mutate1(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Subscribe(m, &querySubscribeServer{stream})
}

type Query_SubscribeServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type querySubscribeServer struct {
	grpc.ServerStream
}

func (x *querySubscribeServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query1",
			Handler:    _Query_Query1_Handler,
		},
		{
			MethodName: "Query2",
			Handler:    _Query_Query2_Handler,
		},
		{
			MethodName: "Mutate1",
			Handler:    _Query_Mutate1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Query_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example/options.proto",
}
