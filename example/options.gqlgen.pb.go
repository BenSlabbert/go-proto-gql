// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/options.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/danielvladco/go-proto-gql"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServiceGQLServer struct{ Service ServiceServer }

func (s *ServiceGQLServer) ServiceMutate1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Mutate1(ctx, in)
}
func (s *ServiceGQLServer) ServiceMutate2(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Mutate2(ctx, in)
}
func (s *ServiceGQLServer) ServiceQuery1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Query1(ctx, in)
}
func (s *ServiceGQLServer) ServicePublish(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Publish(ctx, in)
}
func (s *ServiceGQLServer) ServiceSubscribe(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Subscribe(ctx, in)
}
func (s *ServiceGQLServer) ServicePubSub1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.PubSub1(ctx, in)
}
func (s *ServiceGQLServer) ServiceInvalidSubscribe1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.InvalidSubscribe1(ctx, in)
}
func (s *ServiceGQLServer) ServiceInvalidSubscribe2(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.InvalidSubscribe2(ctx, in)
}
func (s *ServiceGQLServer) ServiceInvalidSubscribe3(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.InvalidSubscribe3(ctx, in)
}
func (s *ServiceGQLServer) ServicePubSub2(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.PubSub2(ctx, in)
}

type QueryGQLServer struct{ Service QueryServer }

func (s *QueryGQLServer) QueryQuery1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Query1(ctx, in)
}
func (s *QueryGQLServer) QueryQuery2(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Query2(ctx, in)
}
func (s *QueryGQLServer) QueryMutate1(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Mutate1(ctx, in)
}
func (s *QueryGQLServer) QuerySubscribe(ctx context.Context, in *Data) (*Data, error) {
	return s.svc.Subscribe(ctx, in)
}
