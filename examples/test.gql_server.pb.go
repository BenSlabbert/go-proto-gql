// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package examples

import (
	"bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"

	account "github.com/danielvladco/go-proto-gql/examples/account"
	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

type Resolvers interface {
	Mutation_accountServiceSignIn(ctx context.Context, req *account.SignInReq) (AccountSignInResError, error)
	Mutation_accountServiceGetCurrentAccount(ctx context.Context) (AccountGetCurrentAccountResError, error)
	Mutation_accountServiceSignUpWithEmail(ctx context.Context, req *account.SignUpWithEmailReq) (AccountSignUpWithEmailResError, error)
	Mutation_accountServiceResendConfirmationEmail(ctx context.Context, req *account.ResendConfirmationEmailReq) (*Error, error)
	Mutation_accountServiceConfirmEmail(ctx context.Context, req *account.ConfirmEmailReq) (*Error, error)
	Mutation_accountServiceForgotPassword(ctx context.Context, req *account.ForgotPasswordReq) (*Error, error)
	Mutation_accountServiceCheckResetPasswordToken(ctx context.Context, req *account.CheckResetPasswordTokenReq) (*Error, error)
	Mutation_accountServiceResetPassword(ctx context.Context, req *account.ResetPasswordReq) (*Error, error)
	Mutation_accountServiceChangePassword(ctx context.Context, req *account.ChangePasswordReq) (*Error, error)
	Mutation_accountServiceRequestChangeEmail(ctx context.Context, req *account.RequestChangeEmailReq) (*Error, error)
	Mutation_accountServiceChangeEmail(ctx context.Context, req *account.ChangeEmailReq) (AccountChangeEmailResError, error)
	Query_accountServiceDeleteAccount(ctx context.Context, req *account.DeleteAccountReq) (*Error, error)

	Subscription_accountServiceRequestDeleteAccount(ctx context.Context) (<-chan *Error, error)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	next := ec._Subscription(ctx, op.Selections)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var accountAccountImplementors = []string{"AccountAccount"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountAccount(ctx context.Context, sel []query.Selection, obj *account.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountAccountImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountAccount")
		case "accountId":
			out.Values[i] = ec._AccountAccount_accountId(ctx, field, obj)
		case "email":
			out.Values[i] = ec._AccountAccount_email(ctx, field, obj)
		case "emailConfirmed":
			out.Values[i] = ec._AccountAccount_emailConfirmed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountAccount_accountId(ctx context.Context, field graphql.CollectedField, obj *account.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountAccount"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AccountId
	return graphql.MarshalString(res)
}

func (ec *executionContext) _AccountAccount_email(ctx context.Context, field graphql.CollectedField, obj *account.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountAccount"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Email
	return graphql.MarshalString(res)
}

func (ec *executionContext) _AccountAccount_emailConfirmed(ctx context.Context, field graphql.CollectedField, obj *account.Account) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountAccount"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EmailConfirmed
	return graphql.MarshalBoolean(res)
}

var accountChangeEmailResImplementors = []string{"AccountChangeEmailRes"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountChangeEmailRes(ctx context.Context, sel []query.Selection, obj *account.ChangeEmailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountChangeEmailResImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountChangeEmailRes")
		case "account":
			out.Values[i] = ec._AccountChangeEmailRes_account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountChangeEmailRes_account(ctx context.Context, field graphql.CollectedField, obj *account.ChangeEmailRes) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountChangeEmailRes"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Account
	if res == nil {
		return graphql.Null
	}
	return ec._AccountAccount(ctx, field.Selections, res)
}

var accountGetCurrentAccountResImplementors = []string{"AccountGetCurrentAccountRes"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountGetCurrentAccountRes(ctx context.Context, sel []query.Selection, obj *account.GetCurrentAccountRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountGetCurrentAccountResImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountGetCurrentAccountRes")
		case "account":
			out.Values[i] = ec._AccountGetCurrentAccountRes_account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountGetCurrentAccountRes_account(ctx context.Context, field graphql.CollectedField, obj *account.GetCurrentAccountRes) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountGetCurrentAccountRes"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Account
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._AccountAccount(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var accountSignInResImplementors = []string{"AccountSignInRes"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountSignInRes(ctx context.Context, sel []query.Selection, obj *account.SignInRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountSignInResImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountSignInRes")
		case "account":
			out.Values[i] = ec._AccountSignInRes_account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountSignInRes_account(ctx context.Context, field graphql.CollectedField, obj *account.SignInRes) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountSignInRes"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Account
	if res == nil {
		return graphql.Null
	}
	return ec._AccountAccount(ctx, field.Selections, res)
}

var accountSignUpWithEmailResImplementors = []string{"AccountSignUpWithEmailRes"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AccountSignUpWithEmailRes(ctx context.Context, sel []query.Selection, obj *account.SignUpWithEmailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, accountSignUpWithEmailResImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountSignUpWithEmailRes")
		case "account":
			out.Values[i] = ec._AccountSignUpWithEmailRes_account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AccountSignUpWithEmailRes_account(ctx context.Context, field graphql.CollectedField, obj *account.SignUpWithEmailRes) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AccountSignUpWithEmailRes"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Account
	if res == nil {
		return graphql.Null
	}
	return ec._AccountAccount(ctx, field.Selections, res)
}

var descriptionImplementors = []string{"Description"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Description(ctx context.Context, sel []query.Selection, obj *Description) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, descriptionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Description")
		case "description":
			out.Values[i] = ec._Description_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Description_description(ctx context.Context, field graphql.CollectedField, obj *Description) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Description"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

var errorImplementors = []string{"Error"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Error(ctx context.Context, sel []query.Selection, obj *Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, errorImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Error")
		case "code":
			out.Values[i] = ec._Error_code(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Error_message(ctx, field, obj)
		case "details":
			out.Values[i] = ec._Error_details(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Error_code(ctx context.Context, field graphql.CollectedField, obj *Error) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Error"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Code
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Error_message(ctx context.Context, field graphql.CollectedField, obj *Error) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Error"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Error_details(ctx context.Context, field graphql.CollectedField, obj *Error) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Error"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Details
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Details(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, mutationImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "accountServiceSignIn":
			out.Values[i] = ec._Mutation_accountServiceSignIn(ctx, field)
		case "accountServiceGetCurrentAccount":
			out.Values[i] = ec._Mutation_accountServiceGetCurrentAccount(ctx, field)
		case "accountServiceSignUpWithEmail":
			out.Values[i] = ec._Mutation_accountServiceSignUpWithEmail(ctx, field)
		case "accountServiceResendConfirmationEmail":
			out.Values[i] = ec._Mutation_accountServiceResendConfirmationEmail(ctx, field)
		case "accountServiceConfirmEmail":
			out.Values[i] = ec._Mutation_accountServiceConfirmEmail(ctx, field)
		case "accountServiceForgotPassword":
			out.Values[i] = ec._Mutation_accountServiceForgotPassword(ctx, field)
		case "accountServiceCheckResetPasswordToken":
			out.Values[i] = ec._Mutation_accountServiceCheckResetPasswordToken(ctx, field)
		case "accountServiceResetPassword":
			out.Values[i] = ec._Mutation_accountServiceResetPassword(ctx, field)
		case "accountServiceChangePassword":
			out.Values[i] = ec._Mutation_accountServiceChangePassword(ctx, field)
		case "accountServiceRequestChangeEmail":
			out.Values[i] = ec._Mutation_accountServiceRequestChangeEmail(ctx, field)
		case "accountServiceChangeEmail":
			out.Values[i] = ec._Mutation_accountServiceChangeEmail(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_accountServiceSignIn(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.SignInReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.SignInReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountSignInReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceSignIn(ctx, args["req"].(*account.SignInReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(AccountSignInResError)
	return ec._AccountSignInResError(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_accountServiceGetCurrentAccount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceGetCurrentAccount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(AccountGetCurrentAccountResError)
	return ec._AccountGetCurrentAccountResError(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_accountServiceSignUpWithEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.SignUpWithEmailReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.SignUpWithEmailReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountSignUpWithEmailReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceSignUpWithEmail(ctx, args["req"].(*account.SignUpWithEmailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(AccountSignUpWithEmailResError)
	return ec._AccountSignUpWithEmailResError(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_accountServiceResendConfirmationEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ResendConfirmationEmailReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ResendConfirmationEmailReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountResendConfirmationEmailReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceResendConfirmationEmail(ctx, args["req"].(*account.ResendConfirmationEmailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceConfirmEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ConfirmEmailReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ConfirmEmailReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountConfirmEmailReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceConfirmEmail(ctx, args["req"].(*account.ConfirmEmailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceForgotPassword(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ForgotPasswordReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ForgotPasswordReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountForgotPasswordReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceForgotPassword(ctx, args["req"].(*account.ForgotPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceCheckResetPasswordToken(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.CheckResetPasswordTokenReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.CheckResetPasswordTokenReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountCheckResetPasswordTokenReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceCheckResetPasswordToken(ctx, args["req"].(*account.CheckResetPasswordTokenReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceResetPassword(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ResetPasswordReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ResetPasswordReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountResetPasswordReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceResetPassword(ctx, args["req"].(*account.ResetPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceChangePassword(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ChangePasswordReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ChangePasswordReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountChangePasswordReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceChangePassword(ctx, args["req"].(*account.ChangePasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceRequestChangeEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.RequestChangeEmailReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.RequestChangeEmailReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountRequestChangeEmailReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceRequestChangeEmail(ctx, args["req"].(*account.RequestChangeEmailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Error)
	if res == nil {
		return graphql.Null
	}
	return ec._Error(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accountServiceChangeEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.ChangeEmailReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.ChangeEmailReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountChangeEmailReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_accountServiceChangeEmail(ctx, args["req"].(*account.ChangeEmailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(AccountChangeEmailResError)
	return ec._AccountChangeEmailResError(ctx, field.Selections, &res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "accountServiceDeleteAccount":
			out.Values[i] = ec._Query_accountServiceDeleteAccount(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_accountServiceDeleteAccount(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *account.DeleteAccountReq
	if tmp, ok := field.Args["req"]; ok {
		var err error
		var ptr1 account.DeleteAccountReq
		if tmp != nil {
			ptr1, err = UnmarshalAccountDeleteAccountReq(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["req"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_accountServiceDeleteAccount(ctx, args["req"].(*account.DeleteAccountReq))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*Error)
		if res == nil {
			return graphql.Null
		}
		return ec._Error(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel []query.Selection) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, subscriptionImplementors, ec.Variables)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "accountServiceRequestDeleteAccount":
		return ec._Subscription_accountServiceRequestDeleteAccount(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_accountServiceRequestDeleteAccount(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{Field: field})
	results, err := ec.resolvers.Subscription_accountServiceRequestDeleteAccount(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}
			return ec._Error(ctx, field.Selections, res)
		}())
		return &out
	}
}

var validationImplementors = []string{"Validation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Validation(ctx context.Context, sel []query.Selection, obj *Validation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, validationImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Validation")
		case "field":
			out.Values[i] = ec._Validation_field(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Validation_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Validation_field(ctx context.Context, field graphql.CollectedField, obj *Validation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Validation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Field
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Validation_description(ctx context.Context, field graphql.CollectedField, obj *Validation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Validation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Directive(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Field(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___EnumValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountChangeEmailResError(ctx context.Context, sel []query.Selection, obj *AccountChangeEmailResError) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case account.ChangeEmailRes:
		return ec._AccountChangeEmailRes(ctx, sel, &obj)
	case *account.ChangeEmailRes:
		return ec._AccountChangeEmailRes(ctx, sel, obj)
	case Error:
		return ec._Error(ctx, sel, &obj)
	case *Error:
		return ec._Error(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _AccountGetCurrentAccountResError(ctx context.Context, sel []query.Selection, obj *AccountGetCurrentAccountResError) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case account.GetCurrentAccountRes:
		return ec._AccountGetCurrentAccountRes(ctx, sel, &obj)
	case *account.GetCurrentAccountRes:
		return ec._AccountGetCurrentAccountRes(ctx, sel, obj)
	case Error:
		return ec._Error(ctx, sel, &obj)
	case *Error:
		return ec._Error(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _AccountSignInResError(ctx context.Context, sel []query.Selection, obj *AccountSignInResError) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case account.SignInRes:
		return ec._AccountSignInRes(ctx, sel, &obj)
	case *account.SignInRes:
		return ec._AccountSignInRes(ctx, sel, obj)
	case Error:
		return ec._Error(ctx, sel, &obj)
	case *Error:
		return ec._Error(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _AccountSignUpWithEmailResError(ctx context.Context, sel []query.Selection, obj *AccountSignUpWithEmailResError) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case account.SignUpWithEmailRes:
		return ec._AccountSignUpWithEmailRes(ctx, sel, &obj)
	case *account.SignUpWithEmailRes:
		return ec._AccountSignUpWithEmailRes(ctx, sel, obj)
	case Error:
		return ec._Error(ctx, sel, &obj)
	case *Error:
		return ec._Error(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Details(ctx context.Context, sel []query.Selection, obj *Details) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case Description:
		return ec._Description(ctx, sel, &obj)
	case *Description:
		return ec._Description(ctx, sel, obj)
	case Validation:
		return ec._Validation(ctx, sel, &obj)
	case *Validation:
		return ec._Validation(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalAccountChangeEmailReq(v interface{}) (account.ChangeEmailReq, error) {
	var it account.ChangeEmailReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountChangePasswordReq(v interface{}) (account.ChangePasswordReq, error) {
	var it account.ChangePasswordReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "oldPassword":
			var err error
			it.OldPassword, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error
			it.NewPassword, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountCheckResetPasswordTokenReq(v interface{}) (account.CheckResetPasswordTokenReq, error) {
	var it account.CheckResetPasswordTokenReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountConfirmEmailReq(v interface{}) (account.ConfirmEmailReq, error) {
	var it account.ConfirmEmailReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountDeleteAccountReq(v interface{}) (account.DeleteAccountReq, error) {
	var it account.DeleteAccountReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountForgotPasswordReq(v interface{}) (account.ForgotPasswordReq, error) {
	var it account.ForgotPasswordReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountRequestChangeEmailReq(v interface{}) (account.RequestChangeEmailReq, error) {
	var it account.RequestChangeEmailReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "newEmail":
			var err error
			it.NewEmail, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountResendConfirmationEmailReq(v interface{}) (account.ResendConfirmationEmailReq, error) {
	var it account.ResendConfirmationEmailReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "inner":
			var err error
			err = (&it.Inner).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			err = (&it.Data).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "accountId":
			var err error
			it.AccountId, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountResetPasswordReq(v interface{}) (account.ResetPasswordReq, error) {
	var it account.ResetPasswordReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				}
			}
			it.Password = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Password[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountSignInReq(v interface{}) (account.SignInReq, error) {
	var it account.SignInReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalAccountSignUpWithEmailReq(v interface{}) (account.SignUpWithEmailReq, error) {
	var it account.SignUpWithEmailReq
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`
type Error {
    code: String
    message: String
    details: [Details]
}
type Description {
    description: String!
}
type Validation {
    field: String
    description: String
}
union Details = Description | Validation
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

input AccountForgotPasswordReq {
	email: String!
}
input AccountResetPasswordReq {
	token: String!
	password: [String!]!
}
input AccountChangePasswordReq {
	oldPassword: String!
	newPassword: String!
}
input AccountRequestChangeEmailReq {
	newEmail: String!
}
input AccountDeleteAccountReq {
	token: String
}
input AccountSignInReq {
	email: String!
	password: String!
}
input AccountSignUpWithEmailReq {
	email: String!
	password: String!
}
input AccountResendConfirmationEmailReq {
	inner: AccountResendConfirmationEmailReqInnerInnerEnum
	data: AccountResendConfirmationEmailReqData
	accountId: String!
}
input AccountConfirmEmailReq {
	token: String!
}
input AccountCheckResetPasswordTokenReq {
	token: String!
}
input AccountChangeEmailReq {
	token: String!
}
type AccountSignInRes {
	account: AccountAccount
}
type AccountGetCurrentAccountRes {
	account: [AccountAccount!]
}
type AccountSignUpWithEmailRes {
	account: AccountAccount
}
type AccountChangeEmailRes {
	account: AccountAccount
}
type AccountAccount {
	accountId: String
	email: String
	emailConfirmed: Boolean
}
enum AccountResendConfirmationEmailReqInnerInnerEnum {
	SSS
	DDD
}
enum AccountResendConfirmationEmailReqData {
	DDD
	NNN
	GGG
}
union AccountSignInResError = AccountSignInRes | Error
union AccountGetCurrentAccountResError = AccountGetCurrentAccountRes | Error
union AccountSignUpWithEmailResError = AccountSignUpWithEmailRes | Error
union AccountChangeEmailResError = AccountChangeEmailRes | Error
type Mutation {
	accountServiceSignIn(req: AccountSignInReq): AccountSignInResError
	accountServiceGetCurrentAccount: AccountGetCurrentAccountResError
	accountServiceSignUpWithEmail(req: AccountSignUpWithEmailReq): AccountSignUpWithEmailResError
	accountServiceResendConfirmationEmail(req: AccountResendConfirmationEmailReq): Error
	accountServiceConfirmEmail(req: AccountConfirmEmailReq): Error
	accountServiceForgotPassword(req: AccountForgotPasswordReq): Error
	accountServiceCheckResetPasswordToken(req: AccountCheckResetPasswordTokenReq): Error
	accountServiceResetPassword(req: AccountResetPasswordReq): Error
	accountServiceChangePassword(req: AccountChangePasswordReq): Error
	accountServiceRequestChangeEmail(req: AccountRequestChangeEmailReq): Error
	accountServiceChangeEmail(req: AccountChangeEmailReq): AccountChangeEmailResError
}
type Query {
	accountServiceDeleteAccount(req: AccountDeleteAccountReq): Error
}
type Subscription {
	accountServiceRequestDeleteAccount: Error
}
`)
